{"meta":{"title":"JMing's Blog","subtitle":"JMing 的个人博客","description":"法王的个人记录日常（非专业）","author":"JMing","url":"https://jm7603.github.io","root":"/"},"pages":[{"title":"关于","date":"2024-04-07T03:48:24.000Z","updated":"2024-04-07T03:49:17.166Z","comments":true,"path":"about/index.html","permalink":"https://jm7603.github.io/about/index.html","excerpt":"","text":"暂无"}],"posts":[{"title":"MacOS使用ssh密钥连接远程服务器","slug":"MacOS使用ssh密钥连接远程服务器","date":"2024-04-06T13:55:39.000Z","updated":"2024-04-06T13:58:12.603Z","comments":true,"path":"其他/MacOS使用ssh密钥连接远程服务器/0981664a56f1/","permalink":"https://jm7603.github.io/%E5%85%B6%E4%BB%96/MacOS%E4%BD%BF%E7%94%A8ssh%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/0981664a56f1/","excerpt":"","text":"一、在本地生成密钥1ssh-keygen -t rsa 一路回车就行了，ssh-keygen 在 MacOS 下会把密钥生成在 /User/用户名/.ssh 下 二、将公钥拷贝到服务器上1ssh-copy-id -i /User/用户名/.ssh/id_rsa.pub root@ip 执行以上命令会要求验证，输入服务器密码就行了 三、连接1ssh root@ip 可以愉快的使用了","categories":[{"name":"其他","slug":"其他","permalink":"https://jm7603.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"https://jm7603.github.io/tags/ssh/"}]},{"title":"C语言轻量级单元测试","slug":"C语言轻量级单元测试","date":"2024-04-02T04:37:45.000Z","updated":"2024-04-08T10:12:07.623Z","comments":true,"path":"C语言/C语言轻量级单元测试/d553fbcb363f/","permalink":"https://jm7603.github.io/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/d553fbcb363f/","excerpt":"","text":"minunit简介项目地址：https://github.com/siu/minunit 开源许可：MIT License 一个非常轻便的、便于使用的 C 语言单元测试框架。它没有任何依赖，所有功能都以宏函数的形式放在头文件中，开箱即用。该项目的 README 中是这样描述的： Minunit 是一个最小的 C&#x2F;C++ 单元测试框架，独立于单个头文件中。 它提供了一种定义和配置测试套件以及一些方便的断言类型的方法。它报告运行的测试数量、断言数量和经过的时间的摘要。 请注意，该项目基于： http://www.jera.com/techinfo/jtns/jtn002.html 该项目基于 John Brewer 的 “C 的最小单元测试框架” MinUnit。它只有三行，如下： 1234/* file: minunit.h */#define mu_assert(message, test) do &#123; if (!(test)) return message; &#125; while (0)#define mu_run_test(test) do &#123; char *message = test(); tests_run++; if (message) return message; &#125; while (0)extern int tests_run; 这是一个极其简单的单元测试框架（或许不应该叫它框架），它只拥有简单的断言、运行测试用例、测试用例技术的功能。很显然，它的功能并不完善，在更大的项目中不便于使用，所以就有了本文中介绍的，更加完善，同时也保持它的轻便的 MinUnit。 使用引入 MinUnit直接包含头文件即可。 123#include &quot;minunit.h&quot;// ...int main() &#123; // ... &#125; 断言**mu_check(condition)**：检测传入的布尔表达式是否为真，如果不为真则打印错误信息。 mu_fail(message): 手动出错，打印信息。（计入断言数量） **mu_assert(test, message)**：在 mu_check() 的基础上加上失败打印自定义信息。 **mu_assert_int_eq(expected, result)**：检测返回值是否与期望值相等（整型）。 **mu_assert_string_eq(expected, result)**：检测返回值是否与期望值相等（字符串）。 **mu_assert_double_eq(expected, result)**：检测返回值是否与期望值近似（浮点型），精度阈值通过在头文件中定义的宏 MINUNIT_EPSILON 来控制。 判断两个浮点数是否近似：两数之差的绝对值与阈值 EPSILON 做比较，如果它小于 EPSILON 则两数近似。 测试用例和测试组合我们可以用 MU_TEST() 定义一个测试用例。 1MU_TEST(test_case1) &#123; // ... &#125; 实际上，上面的代码会被展开为这样： 1static void test_case1(void) &#123;&#125; 使用 MU_RUN_TEST() 运行测试用例。 123456#include &quot;minunit.h&quot;MU_TEST(test_case1) &#123; mu_check(5 == 7); &#125;int main() &#123; MU_RUN_TEST(test_case1); return 0;&#125; 测试组合可以用 MU_TEST_SUITE() 定义，一个测试组合可以将多个测试用例组合起来（其实就是一个函数里面调用了一堆函数）。 1234567MU_TEST(test_case1) &#123; mu_check(5 == 7); &#125;MU_TEST(test_case2) &#123; mu_check(5 != 7); &#125;MU_TEST_SUITE(test_suite1) &#123; MU_RUN_TEST(test_case1); MU_RUN_TEST(test_case2);&#125; 使用 MU_RUN_SUITE() 运行测试组合。 12345#include &quot;minunit.h&quot;int main() &#123; MU_RUN_SUITE(test_suite1); return 0;&#125; 装载与卸载函数我们可以通过在测试组合中使用 MU_SUITE_CONFIGURE() 来绑定装载函数与卸载函数。装载函数和卸载函数会在运行每一个测试用例之前和之后运行，用于运行测试用例的准备工作和善后工作。 1234567891011121314151617181920#include &quot;minunit.h&quot;void test_setup(void) &#123; printf(&quot;test_setup\\n&quot;); &#125;void test_teardown(void) &#123; printf(&quot;test_teardown\\n&quot;); &#125;MU_TEST(test_case1) &#123; mu_check(5 != 7); &#125;MU_TEST(test_case2) &#123; mu_check(6 == 7); &#125;MU_TEST_SUITE(test_suite1) &#123; MU_SUITE_CONFIGURE(&amp;test_setup, &amp;test_teardown); MU_RUN_TEST(test_case1); MU_RUN_TEST(test_case2);&#125;int main() &#123; MU_RUN_SUITE(test_suite1); MU_REPORT(); return 0;&#125; 以上代码在一个测试组合中运行了两个测试用例，并且绑定了装载函数和卸载函数。这两个函数会在运行每个测试用例前后运行。 测试报告通过 MU_REPORT() 打印当前为止的测试结果报告，他将打印测试用例的个数、断言的个数和失败的个数，并计算测试完成的真实时间与处理器时间。以上代码运行结果如下： 123456789101112test_setup.test_teardowntest_setupFtest_case2 failed: /Users/jm/CLionProjects/data_structure/test/llist/llist_test.c:144: 6 == 7test_teardown2 tests, 2 assertions, 1 failuresFinished in 0.00004292 seconds (real) 0.00000800 seconds (proc) END，可以愉快使用了！","categories":[{"name":"C语言","slug":"C语言","permalink":"https://jm7603.github.io/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"https://jm7603.github.io/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"单元测试","slug":"单元测试","permalink":"https://jm7603.github.io/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"}]},{"title":"Hello World","slug":"hello-world","date":"2024-04-02T03:16:28.978Z","updated":"2024-04-02T03:16:28.978Z","comments":true,"path":"uncategorized/hello-world/31284834e87b/","permalink":"https://jm7603.github.io/uncategorized/hello-world/31284834e87b/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"其他","slug":"其他","permalink":"https://jm7603.github.io/categories/%E5%85%B6%E4%BB%96/"},{"name":"C语言","slug":"C语言","permalink":"https://jm7603.github.io/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"https://jm7603.github.io/tags/ssh/"},{"name":"C语言","slug":"C语言","permalink":"https://jm7603.github.io/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"单元测试","slug":"单元测试","permalink":"https://jm7603.github.io/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"}]}