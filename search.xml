<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MacOS使用ssh密钥连接远程服务器</title>
      <link href="/%E5%85%B6%E4%BB%96/MacOS%E4%BD%BF%E7%94%A8ssh%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/0981664a56f1/"/>
      <url>/%E5%85%B6%E4%BB%96/MacOS%E4%BD%BF%E7%94%A8ssh%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/0981664a56f1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、在本地生成密钥"><a href="#一、在本地生成密钥" class="headerlink" title="一、在本地生成密钥"></a>一、在本地生成密钥</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><blockquote><p>一路回车就行了，ssh-keygen 在 MacOS 下会把密钥生成在 <code>/User/用户名/.ssh</code> 下</p></blockquote><h2 id="二、将公钥拷贝到服务器上"><a href="#二、将公钥拷贝到服务器上" class="headerlink" title="二、将公钥拷贝到服务器上"></a>二、将公钥拷贝到服务器上</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i /User/用户名/.ssh/id_rsa.pub root@ip</span><br></pre></td></tr></table></figure><blockquote><p>执行以上命令会要求验证，输入服务器密码就行了</p></blockquote><h2 id="三、连接"><a href="#三、连接" class="headerlink" title="三、连接"></a>三、连接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@ip</span><br></pre></td></tr></table></figure><blockquote><p>可以愉快的使用了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言轻量级单元测试</title>
      <link href="/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/d553fbcb363f/"/>
      <url>/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/d553fbcb363f/</url>
      
        <content type="html"><![CDATA[<h2 id="minunit"><a href="#minunit" class="headerlink" title="minunit"></a>minunit</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>项目地址：<a href="https://github.com/siu/minunit">https://github.com/siu/minunit</a></p><p>开源协议：MIT License</p><p>一个非常轻便的、便于使用的 C 语言单元测试框架。它没有任何依赖，所有功能都以宏函数的形式放在头文件中，开箱即用。该项目的 README 中是这样描述的：</p><blockquote><p>Minunit 是一个最小的 C&#x2F;C++ 单元测试框架，独立于单个头文件中。</p><p>它提供了一种定义和配置测试套件以及一些方便的断言类型的方法。它报告运行的测试数量、断言数量和经过的时间的摘要。</p><p>请注意，该项目基于： <a href="http://www.jera.com/techinfo/jtns/jtn002.html">http://www.jera.com/techinfo/jtns/jtn002.html</a></p></blockquote><p>该项目基于 <code>John Brewer</code> 的 “C 的最小单元测试框架” MinUnit。它只有三行，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* file: minunit.h */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mu_assert(message, test) do &#123; <span class="keyword">if</span> (!(test)) return message; &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mu_run_test(test) do &#123; char *message = test(); tests_run++; <span class="keyword">if</span> (message) return message; &#125; while (0)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> tests_run;</span><br></pre></td></tr></table></figure><p>这是一个极其简单的单元测试框架（或许不应该叫它框架），它只拥有简单的断言、运行测试用例、测试用例技术的功能。很显然，它的功能并不完善，在更大的项目中不便于使用，所以就有了本文中介绍的，更加完善，同时也保持它的轻便的 MinUnit。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="引入-MinUnit"><a href="#引入-MinUnit" class="headerlink" title="引入 MinUnit"></a>引入 MinUnit</h4><p>直接包含头文件即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;minunit.h&quot;</span></span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123; <span class="comment">// ... &#125;</span></span><br></pre></td></tr></table></figure><h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><p><strong>mu_check(condition)</strong>: 检测传入的布尔表达式是否为真，如果不为真则打印错误信息。</p><p><strong>mu_fail(message)</strong>: 手动出错，打印信息。（计入断言数量）</p><p><strong>mu_assert(test, message)</strong>: 在 <code>mu_check()</code> 的基础上加上失败打印自定义信息。</p><p><strong>mu_assert_int_eq(expected, result)</strong>: 检测返回值是否与期望值相等（整型）。</p><p><strong>mu_assert_string_eq(expected, result)</strong>: 检测返回值是否与期望值相等（字符串）。</p><p><strong>mu_assert_double_eq(expected, result)</strong>: 检测返回值是否与期望值近似（浮点型），精度阈值通过在头文件中定义的宏 <code>MINUNIT_EPSILON</code> 来控制。</p><blockquote><p>判断两个浮点数是否近似：两数之差的绝对值与阈值 <strong>EPSILON</strong> 做比较，如果它小于 <strong>EPSILON</strong> 则两数近似。</p></blockquote><h4 id="测试用例和测试组合"><a href="#测试用例和测试组合" class="headerlink" title="测试用例和测试组合"></a>测试用例和测试组合</h4><p>我们可以用 <code>MU_TEST()</code> 定义一个测试用例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MU_TEST(test_case1) &#123; <span class="comment">// ... &#125;</span></span><br></pre></td></tr></table></figure><p>实际上，上面的代码会被展开为这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">test_case1</span><span class="params">(<span class="type">void</span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>MU_RUN_TEST()</code> 运行测试用例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;minunit.h&quot;</span></span></span><br><span class="line">MU_TEST(test_case1) &#123; mu_check(<span class="number">5</span> == <span class="number">7</span>); &#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  MU_RUN_TEST(test_case1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试组合可以用 <code>MU_TEST_SUITE()</code> 定义，一个测试组合可以将多个测试用例组合起来（其实就是一个函数里面调用了一堆函数）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MU_TEST(test_case1) &#123; mu_check(<span class="number">5</span> == <span class="number">7</span>); &#125;</span><br><span class="line">MU_TEST(test_case2) &#123; mu_check(<span class="number">5</span> != <span class="number">7</span>); &#125;</span><br><span class="line"></span><br><span class="line">MU_TEST_SUITE(test_suite1) &#123;</span><br><span class="line">  MU_RUN_TEST(test_case1);</span><br><span class="line">  MU_RUN_TEST(test_case2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>MU_RUN_SUITE()</code> 运行测试组合。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;minunit.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  MU_RUN_SUITE(test_suite1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="装载与卸载函数"><a href="#装载与卸载函数" class="headerlink" title="装载与卸载函数"></a>装载与卸载函数</h4><p>我们可以通过在测试组合中使用 <code>MU_SUITE_CONFIGURE()</code> 来绑定装载函数与卸载函数。装载函数和卸载函数会在运行每一个测试用例之前和之后运行，用于运行测试用例的准备工作和善后工作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;minunit.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_setup</span><span class="params">(<span class="type">void</span>)</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;test_setup\n&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_teardown</span><span class="params">(<span class="type">void</span>)</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;test_teardown\n&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">MU_TEST(test_case1) &#123; mu_check(<span class="number">5</span> != <span class="number">7</span>); &#125;</span><br><span class="line">MU_TEST(test_case2) &#123; mu_check(<span class="number">6</span> == <span class="number">7</span>); &#125;</span><br><span class="line"></span><br><span class="line">MU_TEST_SUITE(test_suite1) &#123;</span><br><span class="line">  MU_SUITE_CONFIGURE(&amp;test_setup, &amp;test_teardown);</span><br><span class="line">  MU_RUN_TEST(test_case1);</span><br><span class="line">  MU_RUN_TEST(test_case2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  MU_RUN_SUITE(test_suite1);</span><br><span class="line">  MU_REPORT();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码在一个测试组合中运行了两个测试用例，并且绑定了装载函数和卸载函数。这两个函数会在运行每个测试用例前后运行。</p><h4 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h4><p>通过 <code>MU_REPORT()</code> 打印当前为止的测试结果报告，他将打印测试用例的个数、断言的个数和失败的个数，并计算测试完成的真实时间与处理器时间。以上代码运行结果如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test_setup</span><br><span class="line">.test_teardown</span><br><span class="line">test_setup</span><br><span class="line">F</span><br><span class="line">test_case2 failed:</span><br><span class="line">/Users/jm/CLionProjects/data_structure/test/llist/llist_test.c:144: 6 == 7</span><br><span class="line">test_teardown</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2 tests, 2 assertions, 1 failures</span><br><span class="line"></span><br><span class="line">Finished in 0.00004292 seconds (real) 0.00000800 seconds (proc)</span><br></pre></td></tr></table></figure><h3 id="END，可以愉快使用了！"><a href="#END，可以愉快使用了！" class="headerlink" title="END，可以愉快使用了！"></a>END，可以愉快使用了！</h3>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/uncategorized/hello-world/31284834e87b/"/>
      <url>/uncategorized/hello-world/31284834e87b/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
